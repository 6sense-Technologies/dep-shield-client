import { AllVulnerabilitiesType } from "@/app/(dashboards)/vulnerabilities/types/types";
import { Badge } from "@/components/ui/badge";
import { Pagination, Paper, Table, TableData } from "@mantine/core";
import { ChevronLeft, ChevronRight, ExternalLink } from "lucide-react";
import Link from "next/link";

const VulnerabilityTable = ({ allVulnerabilities, setPage, limit, page }: { allVulnerabilities: AllVulnerabilitiesType | undefined; setPage: any; limit: any; page: any }) => {
    const tableData: TableData = {
        // caption: "Some elements from periodic table",
        head: ["Name", "Discovered", "Severity (CVSS3)", "Severity (CVSS2)", "Dependencies", "Exploited (CISA)", "Actions"],
        body: allVulnerabilities?.data?.length ? allVulnerabilities?.data.map(item => [
            item.name,
            new Date(item?.discovered)?.toLocaleDateString("en-GB").replace(/\//g, "-"),
            "-", // Replace with actual CVSS3 if available
            "-", // Replace with actual CVSS2 if available
            <Badge key={item?._id} className="inline-flex items-center gap-1 bg-white text-black hover:bg-white text-nowrap font-normal">
                {item?.dependencyName} <ExternalLink size={16} />
            </Badge>,
            "-", // Replace with CISA exploited flag if available
            <Link href={`/vulnerabilities/${item?._id}`} key={item?._id} className="border-[1px] rounded-md py-1 px-5 text-center cursor-pointer">
                View
            </Link>
        ]) : []
    };

    const displayedRowsCount = Math.min(page * limit, allVulnerabilities?.count || 0);

    return (
        <>
            <Paper radius="md" withBorder className="overflow-x-auto">
                <Table
                    data={tableData}
                    className="min-w-[900px] !table-fixed w-full"
                    classNames={{
                        thead: "!text-[#64748B] !text-xs !font-normal",
                        th: "min-w-[120px] whitespace-nowrap",
                        td: "min-w-[120px] whitespace-nowrap"
                    }}
                />
            </Paper>
            <div className="flex items-center">
                <div className="mr-auto text-sm text-[#64748B]">
                    {displayedRowsCount} of {allVulnerabilities?.count} row(s) showing
                </div>
                <div className="flex justify-end mt-4 ml-auto">
                    <Pagination
                        gap={20}
                        classNames={{
                            root: "!justify-end",
                            control: "!border-0 !border-[#E2E8F0] !rounded-lg !text-[#020617] !bg-transparent data-[active=true]:!border-[1px] "
                        }}
                        nextIcon={() => (
                            <span className="flex items-center gap-1 text-sm font-semibold">
                                Next <ChevronRight size={16} />
                            </span>
                        )}
                        previousIcon={() => (
                            <span className="flex items-center gap-1 text-sm font-semibold">
                                <ChevronLeft size={16} /> Previous
                            </span>
                        )}
                        onChange={page => setPage(page)}
                        total={Math.ceil((allVulnerabilities?.count ?? 0) / limit)}
                        boundaries={1}
                        siblings={0}
                        defaultValue={page}
                    />
                </div>
            </div>
        </>
    );
};

export default VulnerabilityTable;
